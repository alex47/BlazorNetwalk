@using BlazorNetwalk.Elements
@using System.Timers

@if (Element is not null)
{
    <div @onpointerdown="PointerDown" @onpointerup="PointerUp" @oncontextmenu:preventDefault="true" @oncontextmenu="DoNothing"
        class="border d-flex align-items-center @(Element.IsFixed ? "bg-secondary" : "")"
     style="width:@(Size + (Margin / 2))px; height:@(Size + (Margin / 2))px; transform: rotate(@(Element.Position * 90 * -1)deg);">
        <img class="mx-auto" src="@(Element.IsConnectedToServer ? Element.IconConnectedToServer : Element.IconNormal)" width="@Size" height="@Size" />
    </div>
}

@code {
    [Parameter]
    public int Size { get; set; } = 0;

    [Parameter]
    public int Margin { get; set; } = 0;

    [Parameter]
    public AbstractElement? Element { get; set; }

    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private bool hasBeenUnfixed = false;
    private System.Timers.Timer timer;

    protected override void OnInitialized()
    {
        timer = new(500);
        timer.Elapsed += OnTimedEvent;
    }

    private void DoNothing()
    { 

    }

    private void PointerDown()
    {
        timer.Start();
    }

    private void PointerUp()
    {
        timer.Stop();

        if (hasBeenUnfixed == false)
        {
            Element?.Rotate();
        }

        hasBeenUnfixed = false;

        OnClickCallback.InvokeAsync();
    }

    private void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        if (Element is not null)
        {
            Element.IsFixed = Element.IsFixed == false;

            if (Element.IsFixed == false)
            {
                hasBeenUnfixed = true;
            }
        }

        timer.Stop();
        StateHasChanged();
    }
}
