@inject IJSRuntime JsRuntime

@using BlazorNetwalk.Elements
@using BlazorNetwalk.GameLogic

@if (game is not null && game.Elements is not null)
{
    @if (isGameSolved)
    {
        <h3>YOU WON!</h3>
    }

    @for (int i = 0; i < game.RowCount; i++)
    {
        <div class="d-flex flex-row">
            @for (int j = 0; j < game.ColumnCount; j++)
            {
                <div class="">
                    <GridElement Size="@ElementSize" Margin="@ElementMargin" Element="game.Elements[i, j]" OnClickCallback="ElementRotatedCallback" />
                </div>
            }
        </div>
    }

    <div class="mt-3">
        <button @onclick="SolveButtonClicked" type="button" class="btn btn-primary me-2">Solve</button>
        <button @onclick="RestartButtonClicked" type="button" class="btn btn-primary me-2">Restart</button>
        <button @onclick="NewGameButtonClickedAsync" type="button" class="btn btn-primary">New Game</button>
    </div>
}

@code {
    private int rowCount = 10;
    private int columnCount = 10;
    private bool isWrapping = true;
    private const int ElementSize = 50;
    private const int ElementMargin = 6;

    private Game? game;
    private bool isGameSolved = false;

    protected override async Task OnInitializedAsync()
    {
        game = new Game();
        await NewGameButtonClickedAsync();
    }

    private void SolveButtonClicked()
    {
        game?.TrySolveGame();
        game?.UpdateServerConnectionStates();
    }

    private void RestartButtonClicked()
    {
        isGameSolved = false;
        game?.RestartGame();
    }

    private async Task NewGameButtonClickedAsync()
    {
        var windowDimensions = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");

        rowCount = (int)Math.Floor((float)windowDimensions.Height / (ElementSize + ElementMargin)) - 1;
        columnCount = (int)Math.Floor((float)windowDimensions.Width / (ElementSize + ElementMargin));

        isGameSolved = false;
        game?.NewGame(rowCount, columnCount, isWrapping);
    }

    private void ElementRotatedCallback()
    {
        game?.UpdateServerConnectionStates();
        isGameSolved = game?.IsGameSolved() ?? false;
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
